

We tested multiple directories of different types and sizes, on a Linux environment. During the testing we tuned the
hyperparameters of the algorithms to get the best results, while also keeping in mind the time efficiency of the algorithms.
After many test runs we extracted the results and drew conclusions. 


----------------------
INITIALIZATION PROCESS
----------------------

    We are testing polygons that are created by the corresponding greedy algorithm with maximizing edge selection
    (edge selection 3) when maximizing the optimal polygon and with minimizing edge selection (edge selection 2)
    when minimizing the optimal polygon. Because of that the ratio of the initial polygon is pretty good to
    begin with and as such the ratio of the optimal polygon can not be drastically improved.

    In terms of time efficiency, the convex hull algorithm is the more efficient one on larger pointsets, 
    sometimes even 5 times as fast as the incremental algorithm, but in terms of precision, the incremental 
    algorithm is the more precise one, and it provides more ideal results.


------------
LOCAL SEARCH
------------

    We tested  multiple k's from 2 - 10, and we concluded that even though the results we get are more optimized
    for k > 5, the execution requires a lot of time, especially for pointsets bigger than 500 points, which is not
    preferable. We decided, that k = 2, while not optimal, results in almost as good scores and the execution far
    less time consuming. It is also important to note that local search takes even more time to finish, if the
    greedy algorithm chosen is the incremental algorithm, due to the fact that the convex hull algorithm we have
    implementented, is noticeably faster than the incremental one.

    PARAMETERS:
    -----------
    After multiple tests, we decided that the best parameter for the local search algorithm is threshold = |10|.
    These were the values that gave us the best results, in time that didn't exceed the cut-off point. Altering
    these values, resulted in way worse results, wheras the execution gains were not significant enough to justify
    the worse results.


-------------------
SIMULATED ANNEALING
-------------------

    TIME:
    -----
    When it comes to construction times we clearly noticed that the global transition step is significantly slower than
    the local step, on maximization and minimization. Running multiple tests, changing only the step parameter and keeping 
    the other parameters the same, the difference between local and global times were obvious. The difference between the
    two is more noticeable on larger pointsets, on which the global step can be even 30 times slower than the local step.

    This is probably due to the validation process, which is more time consuming using a global step, as it has to check
    all the edges of the polygon to see whether or not it retains its simplicity. On the other hand, the local step, only
    checks the edges inside a small box where the changes were made (using a kd tree).

    NUMBER OF ITERATIONS:
    ---------------------
    We notice that as we increase the L parameter (iterations), the results are slightly better. The downside we noticed
    is that the execution time increases as we increase the L parameter, especially on  larger files. Also if the greedy
    algorithm has already provided an adequate enough result, the results from the simulated annealing, can be slightly worse.
    This is probably because the Metropolis criterion, which allows some "bad" transitions, depends on the results that rand()
    provides. When we started testing the algorithms with L = 10000 or more, this effect was much more evident. After multiple
    runs, we realized that global step ratio with L = 8000, doesn't improve results significantly, and is really  close to the
    ratio that L = 8000 yields.

    All thet taken into account, we decided that the best choice for the L parameter is L = 8000 for the local step and
    L = 5000 for the global step, as this way we combine both time efficiency and optimal results.

    RATIO:
    -----
    Local step gives more optimized results with the parameters we provided, than the global step. This is noticeable in both
    bigger and smaller pointsets, as the local step's scores are smaller for the minimization, and larger for the maximization,
    the minBound is smaller when minimizing, which means that the ceiling value for the minimization of the local step, is
    smaller than the same value of the global step. The same applies for the maxBound, which is larger for the maximization
    of the local step, than the same value of the global step.


-----------------------------------
LOCAL SEARCH VS SIMULATED ANNEALING
-----------------------------------

    TIME:
    -----
    The Local search algorithm is generally more time consuming than the simulated annealing ones in smaller as well as bigger
    pointsets on both maximization and minimization. This is probably due to the fact that the local search algorithm, has
    to check a very vast amount of paths to find the best one and there is no optimization when it comes to checking if the
    polygon retains its simplicity. The difference gets smaller when we decrease the size of the path (k parameter) of the
    local search algorithm, but even then it doesn't come close to the time performance of the simulated annealing algorithms,
    especially the one with the local step transitions.

    RATIO:
    -----
    In terms of optimization, the results of the local search, are usually better which can be explained by the  fact that
    the local search has no randomized transitions, but it checks all possible paths.

----------
CONCLUSION
----------
    In terms of time efficiency, Simulated Annealing with local step transitions, and initialization with convex hull
    algorithm, is the most time efficient algorithm. In terms of precision and optimization, the results of the local search
    with convex hull initialization seem to be the best, when the execution doesn't exceed the time limit (500 points and
    above).The fact that the local search algorithm is more time consuming, is the sole reason why it is not suitable for
    bigger pointsets, as the cut-off time will stop the execution when it is exceeded.


-------
RESULTS
-------

    Below are the results of for the algorithms we tested, with the parameters we used. Keep in mind that the amount of
    files for each size cluster is not the same, and as such the comparison between different sizes is not meaningful.
    The comparison should be made between the same size clusters for each algorithm.


	 ||         <Incremental & Local Search>          ||  <Incremental & Sim. Annealing (Local Step)>  ||  <Incremental & Sim. Annealing (Global Step)>  ||          <Convex Hull & Local Search>          ||   <Convex Hull & Sim. Annealing (Local Step)>  ||  <Convex Hull & Sim. Annealing (Global Step)> 
Size || min score | max score | min bound | max bound || min score | max score | min bound | max bound || min score | max score | min bound | max bound  || min score | max score | min bound | max bound  || min score | max score | min bound | max bound  || min score | max score | min bound | max bound
10	 ||  1.27918  |  3.45070  |  0.45510  |  0.82009  ||  1.19262  |  3.46977  |  0.42887  |  0.81404  ||  1.15919  |  3.55670  |  0.35173  |  0.88428   ||  1.23704  |  3.44899  |  0.45510  |  0.82156   ||  1.16299  |  3.41049  |  0.36599  |  0.82156   ||  1.09684  |  3.55146  |  0.35173  |  0.87063
20	 ||  0.82807  |  3.53836  |  0.25736  |  0.85297  ||  1.07938  |  3.39043  |  0.36748  |  0.81592  ||  0.70873  |  3.44023  |  0.22437  |  0.81696   ||  0.87805  |  3.50224  |  0.32599  |  0.84078   ||  1.05077  |  3.44924  |  0.44648  |  0.80908   ||  0.84480  |  3.49888  |  0.26694  |  0.83367
30	 ||  0.16516  |  0.84142  |  0.16516  |  0.84142  ||  0.17949  |  0.83194  |  0.17949  |  0.83194  ||  0.20503  |  0.84560  |  0.20503  |  0.84560   ||  0.17297  |  0.89357  |  0.17297  |  0.89357   ||  0.21141  |  0.86263  |  0.21141  |  0.86263   ||  0.16234  |  0.86754  |  0.16234  |  0.86754
40	 ||  0.28667  |  1.81163  |  0.14534  |  0.90416  ||  0.54988  |  1.71053  |  0.39601  |  0.82920  ||  0.34046  |  1.82176  |  0.19862  |  0.90335   ||  0.23423  |  1.82546  |  0.12617  |  0.91248   ||  0.40921  |  1.73387  |  0.26874  |  0.86125   ||  0.38840  |  1.75271  |  0.21842  |  0.84157
50	 ||  0.24193  |  0.86087  |  0.24193  |  0.86087  ||  0.26406  |  0.76316  |  0.26406  |  0.76316  ||  0.23428  |  0.78519  |  0.23428  |  0.78519   ||  0.20574  |  0.88276  |  0.20574  |  0.88276   ||  0.26461  |  0.81875  |  0.26461  |  0.81875   ||  0.20178  |  0.83476  |  0.20178  |  0.83476
60	 ||  0.17199  |  0.89522  |  0.17199  |  0.89522  ||  0.21714  |  0.80272  |  0.21714  |  0.80272  ||  0.20841  |  0.82013  |  0.20841  |  0.82013   ||  0.15538  |  0.89954  |  0.15538  |  0.89954   ||  0.23157  |  0.88769  |  0.23157  |  0.88769   ||  0.24463  |  0.85308  |  0.24463  |  0.85308
70	 ||  0.12106  |  0.88827  |  0.12106  |  0.88827  ||  0.13978  |  0.81788  |  0.13978  |  0.81788  ||  0.26107  |  0.83685  |  0.26107  |  0.83685   ||  0.13286  |  0.90555  |  0.13286  |  0.90555   ||  0.20681  |  0.87666  |  0.20681  |  0.87666   ||  0.28469  |  0.79647  |  0.28469  |  0.79647
80	 ||  0.21775  |  1.73441  |  0.12886  |  0.81386  ||  0.40546  |  1.63714  |  0.20462  |  0.76104  ||  0.34873  |  1.71489  |  0.24446  |  0.82768   ||  0.20606  |  1.88822  |  0.13076  |  0.93199   ||  0.45795  |  1.81010  |  0.23681  |  0.88985   ||  0.45560  |  1.69390  |  0.28531  |  0.79791
90	 ||  0.31419  |  1.71662  |  0.18064  |  0.85399  ||  0.48976  |  1.53990  |  0.27996  |  0.75336  ||  0.53830  |  1.66202  |  0.28999  |  0.81126   ||  0.26276  |  1.80433  |  0.14286  |  0.89621   ||  0.48095  |  1.75668  |  0.27136  |  0.86657   ||  0.55867  |  1.50974  |  0.31974  |  0.72987
100	 ||  0.33326  |  1.78443  |  0.17478  |  0.87219  ||  0.37117  |  1.69077  |  0.21806  |  0.84221  ||  0.53924  |  1.59693  |  0.27914  |  0.78648   ||  0.31513  |  1.84950  |  0.16410  |  0.92373   ||  0.49555  |  1.75629  |  0.25637  |  0.86298   ||  0.55082  |  1.62082  |  0.31679  |  0.77387
200	 ||  0.27803  |  0.84308  |  0.14190  |  0.00000  ||  0.40276  |  1.50464  |  0.20570  |  0.74499  ||  0.54134  |  1.49299  |  0.28186  |  0.72586   ||  0.27152  |  1.81196  |  0.14741  |  0.89625   ||  0.42825  |  1.73772  |  0.22643  |  0.85679   ||  0.58969  |  1.54080  |  0.30816  |  0.76317
500	 ||  2.00000  |  0.00000  |  1.00000  |  0.00000  ||  0.38578  |  1.47677  |  0.21030  |  0.72546  ||  0.48613  |  1.43733  |  0.24695  |  0.69917   ||  2.00000  |  0.00000  |  1.00000  |  0.00000   ||  0.41724  |  1.72776  |  0.23473  |  0.84926   ||  0.49637  |  1.55416  |  0.27137  |  0.76118
